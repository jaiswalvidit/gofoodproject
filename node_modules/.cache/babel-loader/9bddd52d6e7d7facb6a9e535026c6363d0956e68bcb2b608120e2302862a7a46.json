{"ast":null,"code":"var _jsxFileName = \"D:\\\\food_app\\\\mernapp\\\\src\\\\components\\\\EditAddress.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URLS = {\n  USER_DATA: \"http://localhost:5000/api/userdata\"\n};\nexport default function EditAddress() {\n  _s();\n  // const [userData, setUserData] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [updatedUser, setUpdatedUser] = useState({});\n  const [addressForm, setAddressForm] = useState(\"\");\n  const [addresses, setAddresses] = useState([]);\n  const [editAddressIndex, setEditAddressIndex] = useState(null);\n  const [isAddingAddress, setIsAddingAddress] = useState(false);\n  const [updatedLocation, setUpdatedLocation] = useState([]);\n  const useremail = localStorage.getItem(\"userEmail\");\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(API_URLS.USER_DATA, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (response.ok) {\n          const users = await response.json();\n          const filteredUser = users.find(user => user.email === useremail);\n          if (filteredUser) {\n            // setUserData(filteredUser);\n            setUpdatedUser(filteredUser);\n            setAddresses(filteredUser.location || []);\n          } else {\n            console.error(\"User with email not found\");\n          }\n        } else {\n          console.error(\"Failed to fetch user data\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching user data:\", error);\n      }\n    }\n    fetchData();\n  }, [useremail]);\n  const handleSaveClick = async () => {\n    try {\n      // Apply the changes to the updatedLocation state\n      const updatedUserWithLocation = {\n        ...updatedUser,\n        location: updatedLocation\n      };\n      console.log(updatedLocation);\n\n      // Update the user data in the database\n      const response = await fetch(API_URLS.USER_DATA, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedUserWithLocation)\n      });\n      if (response.ok) {\n        const updatedUserData = await response.json();\n        // setUserData(updatedUserData);\n        setIsEditing(false);\n      } else {\n        console.error(\"Failed to update user data\");\n      }\n    } catch (error) {\n      console.error(\"Error updating user data:\", error);\n    }\n  };\n  const handleAddressChange = ({\n    target: {\n      name,\n      value\n    }\n  }) => {\n    setAddressForm(value);\n  };\n  const handleAddressSubmit = async e => {\n    e.preventDefault();\n    let newAddress = addressForm; // Set newAddress to the value from addressForm\n\n    if (editAddressIndex !== null) {\n      // Edit address\n      const newAddresses = [...addresses];\n      newAddresses[editAddressIndex] = newAddress;\n      setAddresses(newAddresses);\n\n      // Update the updated location for saving\n      setUpdatedLocation(newAddresses);\n    } else {\n      // Add new address\n      const newLocationArray = [addressForm];\n      setAddresses([...addresses, newLocationArray]);\n\n      // Update the updated location for saving\n      setUpdatedLocation([...addresses, ...newLocationArray]);\n    }\n    setAddressForm(\"\");\n    setEditAddressIndex(null);\n    setIsAddingAddress(false);\n  };\n  const toggleAddAddress = () => {\n    setIsAddingAddress(!isAddingAddress);\n    setAddressForm(\"\");\n    setEditAddressIndex(null);\n  };\n  const editAddress = async index => {\n    // Edit address - Set the form values and open the form\n    setAddressForm(addresses[index]);\n    setEditAddressIndex(index);\n    setIsEditing(true); // Set isEditing to true when editing\n    setIsAddingAddress(true);\n  };\n  const deleteAddress = async index => {\n    // Delete address\n    const newAddresses = [...addresses];\n    newAddresses.splice(index, 1);\n    setAddresses(newAddresses);\n\n    // Update the updated location for saving\n    setUpdatedLocation(newAddresses);\n  };\n  const renderAddressForm = () => {\n    if (isAddingAddress || isEditing) {\n      // Show the form when adding or editing\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleAddressSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"location\",\n            children: \"Location:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            id: \"location\",\n            name: \"location\",\n            value: addressForm,\n            onChange: handleAddressChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          children: editAddressIndex !== null ? \"Update Address\" : \"Add Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary ml-2 mx-2\",\n          onClick: toggleAddAddress,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center font-weight-bold px-2 py-0 rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn bg-danger text-light fs-2 btn-lg rounded\",\n          onClick: toggleAddAddress,\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"row\",\n      children: addresses.map((address, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card mb-3 \",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: [\"Address \", index + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text text-capitalize\",\n              children: address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"btn-group\",\n              role: \"group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-primary mx-3 rounded\",\n                onClick: () => editAddress(index),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-warning mx-3 rounded\",\n                onClick: () => deleteAddress(index),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: renderAddressForm()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary my-2\",\n      onClick: handleSaveClick,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n}\n_s(EditAddress, \"FsvIgJbgIFSiNn+zzGfIE1l6eqY=\");\n_c = EditAddress;\nvar _c;\n$RefreshReg$(_c, \"EditAddress\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_URLS","USER_DATA","EditAddress","_s","isEditing","setIsEditing","updatedUser","setUpdatedUser","addressForm","setAddressForm","addresses","setAddresses","editAddressIndex","setEditAddressIndex","isAddingAddress","setIsAddingAddress","updatedLocation","setUpdatedLocation","useremail","localStorage","getItem","fetchData","response","fetch","method","headers","ok","users","json","filteredUser","find","user","email","location","console","error","handleSaveClick","updatedUserWithLocation","log","body","JSON","stringify","updatedUserData","handleAddressChange","target","name","value","handleAddressSubmit","e","preventDefault","newAddress","newAddresses","newLocationArray","toggleAddAddress","editAddress","index","deleteAddress","splice","renderAddressForm","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","onClick","map","address","role","_c","$RefreshReg$"],"sources":["D:/food_app/mernapp/src/components/EditAddress.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nconst API_URLS = {\r\n  USER_DATA: \"http://localhost:5000/api/userdata\",\r\n};\r\n\r\nexport default function EditAddress() {\r\n  // const [userData, setUserData] = useState(null);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [updatedUser, setUpdatedUser] = useState({});\r\n  const [addressForm, setAddressForm] = useState(\"\");\r\n  const [addresses, setAddresses] = useState([]);\r\n  const [editAddressIndex, setEditAddressIndex] = useState(null);\r\n  const [isAddingAddress, setIsAddingAddress] = useState(false);\r\n  const [updatedLocation, setUpdatedLocation] = useState([]);\r\n  const useremail = localStorage.getItem(\"userEmail\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const response = await fetch(API_URLS.USER_DATA, {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n      \r\n        if (response.ok) {\r\n          const users = await response.json();\r\n          const filteredUser = users.find((user) => user.email === useremail);\r\n\r\n          if (filteredUser) {\r\n            // setUserData(filteredUser);\r\n            setUpdatedUser(filteredUser);\r\n            setAddresses(filteredUser.location || []);\r\n          } else {\r\n            console.error(\"User with email not found\");\r\n          }\r\n        } else {\r\n          console.error(\"Failed to fetch user data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching user data:\", error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, [useremail]);\r\n\r\n  const handleSaveClick = async () => {\r\n    try {\r\n      // Apply the changes to the updatedLocation state\r\n      const updatedUserWithLocation = {\r\n        ...updatedUser,\r\n        location: updatedLocation,\r\n      };\r\n      console.log(updatedLocation);\r\n\r\n      // Update the user data in the database\r\n      const response = await fetch(API_URLS.USER_DATA, {\r\n        method: \"PATCH\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(updatedUserWithLocation),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const updatedUserData = await response.json();\r\n        // setUserData(updatedUserData);\r\n        setIsEditing(false);\r\n      } else {\r\n        console.error(\"Failed to update user data\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating user data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleAddressChange = ({ target: { name, value } }) => {\r\n    setAddressForm(value);\r\n  };\r\n\r\n  const handleAddressSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    let newAddress = addressForm; // Set newAddress to the value from addressForm\r\n\r\n    if (editAddressIndex !== null) {\r\n      // Edit address\r\n      const newAddresses = [...addresses];\r\n      newAddresses[editAddressIndex] = newAddress;\r\n      setAddresses(newAddresses);\r\n\r\n      // Update the updated location for saving\r\n      setUpdatedLocation(newAddresses);\r\n    } else {\r\n      // Add new address\r\n      const newLocationArray = [addressForm];\r\n      setAddresses([...addresses, newLocationArray]);\r\n\r\n      // Update the updated location for saving\r\n      setUpdatedLocation([...addresses, ...newLocationArray]);\r\n    }\r\n\r\n    setAddressForm(\"\");\r\n    setEditAddressIndex(null);\r\n    setIsAddingAddress(false);\r\n  };\r\n\r\n  const toggleAddAddress = () => {\r\n    setIsAddingAddress(!isAddingAddress);\r\n    setAddressForm(\"\");\r\n    setEditAddressIndex(null);\r\n  };\r\n\r\n  const editAddress = async (index) => {\r\n    // Edit address - Set the form values and open the form\r\n    setAddressForm(addresses[index]);\r\n\r\n    setEditAddressIndex(index);\r\n    setIsEditing(true); // Set isEditing to true when editing\r\n    setIsAddingAddress(true);\r\n  };\r\n\r\n  const deleteAddress = async (index) => {\r\n    // Delete address\r\n    const newAddresses = [...addresses];\r\n    newAddresses.splice(index, 1);\r\n    setAddresses(newAddresses);\r\n\r\n    // Update the updated location for saving\r\n    setUpdatedLocation(newAddresses);\r\n  };\r\n\r\n  const renderAddressForm = () => {\r\n    if (isAddingAddress || isEditing) {\r\n      // Show the form when adding or editing\r\n      return (\r\n        <form onSubmit={handleAddressSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"location\">Location:</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"location\"\r\n              name=\"location\"\r\n              value={addressForm}\r\n              onChange={handleAddressChange}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            {editAddressIndex !== null ? \"Update Address\" : \"Add Address\"}\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary ml-2 mx-2\"\r\n            onClick={toggleAddAddress}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </form>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"text-center font-weight-bold px-2 py-0 rounded\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn bg-danger text-light fs-2 btn-lg rounded\"\r\n            onClick={toggleAddAddress}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ul className=\"row\">\r\n        {addresses.map((address, index) => (\r\n          <div className=\"col-md-6\" key={index}>\r\n            <div className=\"card mb-3 \">\r\n              <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Address {index + 1}</h5>\r\n                <p className=\"card-text text-capitalize\">{address}</p>\r\n                <div className=\"btn-group\" role=\"group\">\r\n                  <button\r\n                    className=\"btn btn-primary mx-3 rounded\"\r\n                    onClick={() => editAddress(index)}\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                  <button\r\n                    className=\"btn btn-warning mx-3 rounded\"\r\n                    onClick={() => deleteAddress(index)}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </ul>\r\n      <h2>{renderAddressForm()}</h2>\r\n\r\n      <button className=\"btn btn-primary my-2\" onClick={handleSaveClick}>\r\n        Save\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnD,MAAMC,QAAQ,GAAG;EACfC,SAAS,EAAE;AACb,CAAC;AAED,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACkB,eAAe,EAAEC,kBAAkB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACoB,eAAe,EAAEC,kBAAkB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAMsB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAEnDvB,SAAS,CAAC,MAAM;IACd,eAAewB,SAASA,CAAA,EAAG;MACzB,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACvB,QAAQ,CAACC,SAAS,EAAE;UAC/CuB,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QAEF,IAAIH,QAAQ,CAACI,EAAE,EAAE;UACf,MAAMC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;UACnC,MAAMC,YAAY,GAAGF,KAAK,CAACG,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,KAAKd,SAAS,CAAC;UAEnE,IAAIW,YAAY,EAAE;YAChB;YACAtB,cAAc,CAACsB,YAAY,CAAC;YAC5BlB,YAAY,CAACkB,YAAY,CAACI,QAAQ,IAAI,EAAE,CAAC;UAC3C,CAAC,MAAM;YACLC,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;UAC5C;QACF,CAAC,MAAM;UACLD,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;QAC5C;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF;IAEAd,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACH,SAAS,CAAC,CAAC;EAEf,MAAMkB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF;MACA,MAAMC,uBAAuB,GAAG;QAC9B,GAAG/B,WAAW;QACd2B,QAAQ,EAAEjB;MACZ,CAAC;MACDkB,OAAO,CAACI,GAAG,CAACtB,eAAe,CAAC;;MAE5B;MACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACvB,QAAQ,CAACC,SAAS,EAAE;QAC/CuB,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,uBAAuB;MAC9C,CAAC,CAAC;MAEF,IAAIf,QAAQ,CAACI,EAAE,EAAE;QACf,MAAMgB,eAAe,GAAG,MAAMpB,QAAQ,CAACM,IAAI,CAAC,CAAC;QAC7C;QACAvB,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,MAAM;QACL6B,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAMQ,mBAAmB,GAAGA,CAAC;IAAEC,MAAM,EAAE;MAAEC,IAAI;MAAEC;IAAM;EAAE,CAAC,KAAK;IAC3DrC,cAAc,CAACqC,KAAK,CAAC;EACvB,CAAC;EAED,MAAMC,mBAAmB,GAAG,MAAOC,CAAC,IAAK;IACvCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAIC,UAAU,GAAG1C,WAAW,CAAC,CAAC;;IAE9B,IAAII,gBAAgB,KAAK,IAAI,EAAE;MAC7B;MACA,MAAMuC,YAAY,GAAG,CAAC,GAAGzC,SAAS,CAAC;MACnCyC,YAAY,CAACvC,gBAAgB,CAAC,GAAGsC,UAAU;MAC3CvC,YAAY,CAACwC,YAAY,CAAC;;MAE1B;MACAlC,kBAAkB,CAACkC,YAAY,CAAC;IAClC,CAAC,MAAM;MACL;MACA,MAAMC,gBAAgB,GAAG,CAAC5C,WAAW,CAAC;MACtCG,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAE0C,gBAAgB,CAAC,CAAC;;MAE9C;MACAnC,kBAAkB,CAAC,CAAC,GAAGP,SAAS,EAAE,GAAG0C,gBAAgB,CAAC,CAAC;IACzD;IAEA3C,cAAc,CAAC,EAAE,CAAC;IAClBI,mBAAmB,CAAC,IAAI,CAAC;IACzBE,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMsC,gBAAgB,GAAGA,CAAA,KAAM;IAC7BtC,kBAAkB,CAAC,CAACD,eAAe,CAAC;IACpCL,cAAc,CAAC,EAAE,CAAC;IAClBI,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC;EAED,MAAMyC,WAAW,GAAG,MAAOC,KAAK,IAAK;IACnC;IACA9C,cAAc,CAACC,SAAS,CAAC6C,KAAK,CAAC,CAAC;IAEhC1C,mBAAmB,CAAC0C,KAAK,CAAC;IAC1BlD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpBU,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAMyC,aAAa,GAAG,MAAOD,KAAK,IAAK;IACrC;IACA,MAAMJ,YAAY,GAAG,CAAC,GAAGzC,SAAS,CAAC;IACnCyC,YAAY,CAACM,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAC7B5C,YAAY,CAACwC,YAAY,CAAC;;IAE1B;IACAlC,kBAAkB,CAACkC,YAAY,CAAC;EAClC,CAAC;EAED,MAAMO,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAI5C,eAAe,IAAIV,SAAS,EAAE;MAChC;MACA,oBACEL,OAAA;QAAM4D,QAAQ,EAAEZ,mBAAoB;QAAAa,QAAA,gBAClC7D,OAAA;UAAK8D,SAAS,EAAC,YAAY;UAAAD,QAAA,gBACzB7D,OAAA;YAAO+D,OAAO,EAAC,UAAU;YAAAF,QAAA,EAAC;UAAS;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC3CnE,OAAA;YACEoE,IAAI,EAAC,MAAM;YACXN,SAAS,EAAC,cAAc;YACxBO,EAAE,EAAC,UAAU;YACbvB,IAAI,EAAC,UAAU;YACfC,KAAK,EAAEtC,WAAY;YACnB6D,QAAQ,EAAE1B;UAAoB;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNnE,OAAA;UAAQoE,IAAI,EAAC,QAAQ;UAACN,SAAS,EAAC,iBAAiB;UAAAD,QAAA,EAC9ChD,gBAAgB,KAAK,IAAI,GAAG,gBAAgB,GAAG;QAAa;UAAAmD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CAAC,eACTnE,OAAA;UACEoE,IAAI,EAAC,QAAQ;UACbN,SAAS,EAAC,6BAA6B;UACvCS,OAAO,EAAEjB,gBAAiB;UAAAO,QAAA,EAC3B;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAEX,CAAC,MAAM;MACL,oBACEnE,OAAA;QAAK8D,SAAS,EAAC,gDAAgD;QAAAD,QAAA,eAC7D7D,OAAA;UACEoE,IAAI,EAAC,QAAQ;UACbN,SAAS,EAAC,8CAA8C;UACxDS,OAAO,EAAEjB,gBAAiB;UAAAO,QAAA,EAC3B;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAEV;EACF,CAAC;EAED,oBACEnE,OAAA;IAAA6D,QAAA,gBACE7D,OAAA;MAAI8D,SAAS,EAAC,KAAK;MAAAD,QAAA,EAChBlD,SAAS,CAAC6D,GAAG,CAAC,CAACC,OAAO,EAAEjB,KAAK,kBAC5BxD,OAAA;QAAK8D,SAAS,EAAC,UAAU;QAAAD,QAAA,eACvB7D,OAAA;UAAK8D,SAAS,EAAC,YAAY;UAAAD,QAAA,eACzB7D,OAAA;YAAK8D,SAAS,EAAC,WAAW;YAAAD,QAAA,gBACxB7D,OAAA;cAAI8D,SAAS,EAAC,YAAY;cAAAD,QAAA,GAAC,UAAQ,EAACL,KAAK,GAAG,CAAC;YAAA;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACnDnE,OAAA;cAAG8D,SAAS,EAAC,2BAA2B;cAAAD,QAAA,EAAEY;YAAO;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACtDnE,OAAA;cAAK8D,SAAS,EAAC,WAAW;cAACY,IAAI,EAAC,OAAO;cAAAb,QAAA,gBACrC7D,OAAA;gBACE8D,SAAS,EAAC,8BAA8B;gBACxCS,OAAO,EAAEA,CAAA,KAAMhB,WAAW,CAACC,KAAK,CAAE;gBAAAK,QAAA,EACnC;cAED;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACTnE,OAAA;gBACE8D,SAAS,EAAC,8BAA8B;gBACxCS,OAAO,EAAEA,CAAA,KAAMd,aAAa,CAACD,KAAK,CAAE;gBAAAK,QAAA,EACrC;cAED;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC,GApBuBX,KAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAqB/B,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACLnE,OAAA;MAAA6D,QAAA,EAAKF,iBAAiB,CAAC;IAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAE9BnE,OAAA;MAAQ8D,SAAS,EAAC,sBAAsB;MAACS,OAAO,EAAElC,eAAgB;MAAAwB,QAAA,EAAC;IAEnE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAC/D,EAAA,CA/MuBD,WAAW;AAAAwE,EAAA,GAAXxE,WAAW;AAAA,IAAAwE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}